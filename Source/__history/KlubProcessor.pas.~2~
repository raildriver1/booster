unit KlubProcessor;

interface

uses
  Windows, SysUtils;

type
  // Структура времени KLUB
  TKlubTime = record
    hour, min, sec: Integer;
  end;

  // Конфигурация адресов памяти
  TKlubConfig = record
    BaseAddress: Cardinal;
    
    // Адреса кнопок
    ZButtonsBase: Cardinal;
    
    // Адреса KLUB переменных
    KlubRmpAddress: Cardinal;
    KlubVvodModeAddress: Cardinal;
    KlubBrightnessAddress: Cardinal;
    KlubString2Address: Cardinal;
    KlubString3Address: Cardinal;
    KlubMessageAddress: Cardinal;
    KlubTrainLengthAddress: Cardinal;
    KlubTrackAddress: Cardinal;
    KlubIspravAddress: Cardinal;
    KlubK4Address: Cardinal;
    KlubK71Address: Cardinal;
    KlubShowTCAddress: Cardinal;
    KlubK122Address: Cardinal;
    KlubK799Address: Cardinal;
    KlubK809Address: Cardinal;
    KlubWhiteSpeedAddress: Cardinal;
    KlubEkAddress: Cardinal;
    
    // Адреса системных переменных
    WheelsetsSpeedAddress: Cardinal;
    LsAddress: Cardinal;
    AlsnModeAddress: Cardinal;
    AlsnFreqAddress: Cardinal;
    VkStatusAddress: Cardinal;
    RbStatusAddress: Cardinal;
    ZTimeAddress: Cardinal;
    AbsSpeedKphAddress: Cardinal;
    TraversedPathAddress: Cardinal;
    SautPodtDistAddress: Cardinal;
    SautOtpravDistAddress: Cardinal;
    SautAimDistAddress: Cardinal;
    SautSpeedLimitAddress: Cardinal;
    MyTrackAddress: Cardinal;
    MaxTracksAddress: Cardinal;
    RouteAddress: Cardinal;
  end;

const
  // Смещения кнопок в структуре ZBUTTONS
  BTN_RMP_CURR = 25;      BTN_RMP_PREV = 24;
  BTN_FREQ_CURR = 37;     BTN_FREQ_PREV = 36;
  BTN_MODE10 = 49;
  BTN_MODE20 = 61;
  BTN_MODE30 = 73;
  BTN_BRIGHT_CURR = 85;   BTN_BRIGHT_PREV = 84;
  BTN_ENTER_CURR = 97;    BTN_ENTER_PREV = 96;
  BTN_DIGIT0_CURR = 121;  BTN_DIGIT0_PREV = 120;
  BTN_DIGIT1_CURR = 133;  BTN_DIGIT1_PREV = 132;
  BTN_DIGIT2_CURR = 145;  BTN_DIGIT2_PREV = 144;
  BTN_DIGIT3_CURR = 157;  BTN_DIGIT3_PREV = 156;
  BTN_DIGIT4_CURR = 169;  BTN_DIGIT4_PREV = 168;
  BTN_DIGIT5_CURR = 181;  BTN_DIGIT5_PREV = 180;
  BTN_DIGIT6_CURR = 193;  BTN_DIGIT6_PREV = 192;
  BTN_DIGIT7_CURR = 205;  BTN_DIGIT7_PREV = 204;
  BTN_DIGIT8_CURR = 217;  BTN_DIGIT8_PREV = 216;
  BTN_DIGIT9_CURR = 229;  BTN_DIGIT9_PREV = 228;
  BTN_CANCEL = 241;
  BTN_SAUT_PODT_CURR = 253; BTN_SAUT_PODT_PREV = 252;
  BTN_SAUT_OTPR_CURR = 265; BTN_SAUT_OTPR_PREV = 264;
  BTN_TRACK_SPD_CURR = 277; BTN_TRACK_SPD_PREV = 276;
  BTN_BRAKE_CURR = 289;     BTN_BRAKE_PREV = 288;

var
  // Глобальная конфигурация адресов
  KlubConfig: TKlubConfig;
  
  // Флаги отладки и логирования
  EnableLogging: Boolean = False;
  LogFileName: string = 'KlubProcessor.log';

// Основные функции
procedure InitializeKlubProcessor(const Config: TKlubConfig);
procedure WORLD_PROCESSKLUBKEYS; stdcall;
procedure ProcessKlubCommand(Command: Integer);

// Вспомогательные функции
function GetDefaultKlubConfig: TKlubConfig;
procedure LogMessage(const Msg: string);

// Экспортируемые функции
exports
  WORLD_PROCESSKLUBKEYS,
  InitializeKlubProcessor;

implementation

// === БЕЗОПАСНАЯ РАБОТА С ПАМЯТЬЮ ===

function SafeReadInteger(Address: Cardinal): Integer;
begin
  try
    Result := PInteger(Address)^;
  except
    Result := 0;
  end;
end;

function SafeReadSingle(Address: Cardinal): Single;
begin
  try
    Result := PSingle(Address)^;
  except
    Result := 0.0;
  end;
end;

function SafeReadByte(Address: Cardinal): Byte;
begin
  try
    Result := PByte(Address)^;
  except
    Result := 0;
  end;
end;

function SafeReadWord(Address: Cardinal): Word;
begin
  try
    Result := PWord(Address)^;
  except
    Result := 0;
  end;
end;

procedure SafeWriteInteger(Address: Cardinal; Value: Integer);
begin
  try
    PInteger(Address)^ := Value;
  except
    // Игнорируем ошибки записи
  end;
end;

procedure SafeWriteByte(Address: Cardinal; Value: Byte);
begin
  try
    PByte(Address)^ := Value;
  except
    // Игнорируем ошибки записи
  end;
end;

procedure SafeWriteSingle(Address: Cardinal; Value: Single);
begin
  try
    PSingle(Address)^ := Value;
  except
    // Игнорируем ошибки записи
  end;
end;

// === РАБОТА СО СТРОКАМИ ===

function SafeReadAnsiString(Address: Cardinal): string;
var
  StrPtr: PAnsiChar;
  StrLen: Integer;
begin
  Result := '';
  try
    StrPtr := PAnsiChar(PInteger(Address)^);
    if StrPtr <> nil then
    begin
      StrLen := PInteger(Cardinal(StrPtr) - 4)^; // Длина строки хранится перед данными
      if (StrLen > 0) and (StrLen < 1000) then // Разумное ограничение
        SetString(Result, StrPtr, StrLen);
    end;
  except
    Result := '';
  end;
end;

procedure SafeWriteAnsiString(Address: Cardinal; const Value: string);
begin
  try
    // Упрощенная запись - в реальности нужно работать через FPC_ANSISTR_ASSIGN
    // Здесь просто записываем как число для совместимости
    SafeWriteInteger(Address, StrToIntDef(Value, 0));
  except
    // Игнорируем ошибки
  end;
end;

// === РАБОТА С КНОПКАМИ ===

function IsButtonPressed(CurrentOffset, PrevOffset: Integer): Boolean;
var
  CurrentState, PrevState: Byte;
  ButtonBase: Cardinal;
begin
  Result := False;
  try
    ButtonBase := KlubConfig.BaseAddress + KlubConfig.ZButtonsBase;
    CurrentState := SafeReadByte(ButtonBase + CurrentOffset);
    PrevState := SafeReadByte(ButtonBase + PrevOffset);
    
    Result := (CurrentState = 1) and (PrevState <> CurrentState);
    
    // Обновляем предыдущее состояние
    if CurrentState <> PrevState then
      SafeWriteByte(ButtonBase + PrevOffset, CurrentState);
  except
    Result := False;
  end;
end;

function IsButtonHeld(Offset: Integer): Boolean;
var
  ButtonBase: Cardinal;
begin
  Result := False;
  try
    ButtonBase := KlubConfig.BaseAddress + KlubConfig.ZButtonsBase;
    Result := SafeReadByte(ButtonBase + Offset) = 1;
  except
    Result := False;
  end;
end;

// === РАБОТА СО СТРОКОЙ ВВОДА ===

procedure AppendDigitToString(Digit: Integer);
var
  CurrentStr: string;
  NewValue: Integer;
begin
  try
    // Читаем текущую строку
    CurrentStr := SafeReadAnsiString(KlubConfig.KlubString3Address);
    
    // Ограничиваем длину
    if Length(CurrentStr) < 5 then
    begin
      CurrentStr := CurrentStr + IntToStr(Digit);
      SafeWriteAnsiString(KlubConfig.KlubString3Address, CurrentStr);
      
      LogMessage('Added digit ' + IntToStr(Digit) + ', string now: ' + CurrentStr);
    end;
  except
    LogMessage('Error appending digit: ' + IntToStr(Digit));
  end;
end;

procedure ClearInputString;
begin
  try
    SafeWriteAnsiString(KlubConfig.KlubString3Address, '');
    LogMessage('Input string cleared');
  except
    LogMessage('Error clearing input string');
  end;
end;

// === КОМАНДЫ KLUB ===

procedure ProcessKlubCommand(Command: Integer);
begin
  try
    case Command of
      777: // Специальная команда "777"
      begin
        SafeWriteInteger(KlubConfig.KlubK4Address, 1);
        SafeWriteInteger(KlubConfig.KlubShowTCAddress, 1);
        LogMessage('KLUB Command 777 executed - Debug mode activated');
      end;
      
      // Команды управления K71
      71: SafeWriteInteger(KlubConfig.KlubK71Address, 1);
      70: SafeWriteInteger(KlubConfig.KlubK71Address, 0);
      
      // Команды управления K799/K809
      799: SafeWriteInteger(KlubConfig.KlubK799Address, 1);
      800: 
      begin
        SafeWriteInteger(KlubConfig.KlubK799Address, 0);
        SafeWriteInteger(KlubConfig.KlubK809Address, 0);
        SafeWriteInteger(KlubConfig.KlubWhiteSpeedAddress, 40);
      end;
      809: SafeWriteInteger(KlubConfig.KlubK809Address, 1);
      
      // Команда времени (устанавливает текущее время)
      1234:
      begin
        SafeWriteInteger(KlubConfig.KlubK4Address, 1);
        LogMessage('Time sync command executed');
      end;
      
    else
      LogMessage('Unknown KLUB command: ' + IntToStr(Command));
    end;
  except
    LogMessage('Error processing KLUB command: ' + IntToStr(Command));
  end;
end;

// === ОСНОВНАЯ ФУНКЦИЯ ===

procedure WORLD_PROCESSKLUBKEYS; stdcall;
var
  klubRmp, klubVvodMode, klubBrightness: Integer;
  klubTrainLength, klubTrack, klubIsprav: Integer;
  klubK4, klubK71, klubShowTC, klubK122: Integer;
  klubK799, klubK809, klubWhiteSpeed: Integer;
  wheelsetSpeed, ls, alsnMode, alsnFreq: Single;
  vkStatus, rbStatus: Integer;
  absSpeedKph: Single;
  inputValue: Integer;
  traversedPath: Single;
  sautPodtDist, sautOtpravDist: Integer;
  myTrack, maxTracks: Integer;
  trackSpeedLimit: Word;
begin
  try
    // Читаем основные переменные
    klubRmp := SafeReadInteger(KlubConfig.KlubRmpAddress);
    klubVvodMode := SafeReadInteger(KlubConfig.KlubVvodModeAddress);
    klubBrightness := SafeReadInteger(KlubConfig.KlubBrightnessAddress);
    
    wheelsetSpeed := SafeReadSingle(KlubConfig.WheelsetsSpeedAddress);
    ls := SafeReadInteger(KlubConfig.LsAddress);
    alsnMode := SafeReadInteger(KlubConfig.AlsnModeAddress);
    alsnFreq := SafeReadInteger(KlubConfig.AlsnFreqAddress);
    vkStatus := SafeReadInteger(KlubConfig.VkStatusAddress);
    rbStatus := SafeReadInteger(KlubConfig.RbStatusAddress);
    absSpeedKph := SafeReadSingle(KlubConfig.AbsSpeedKphAddress);
    
    // === ОБРАБОТКА КНОПКИ RMP ===
    if IsButtonPressed(BTN_RMP_CURR, BTN_RMP_PREV) then
    begin
      if (Abs(wheelsetSpeed) < 1.0) and (ls <> 5) and (ls <> 4) then
      begin
        Inc(klubRmp);
        if klubRmp > 2 then
          klubRmp := 0;
        SafeWriteInteger(KlubConfig.KlubRmpAddress, klubRmp);
        LogMessage('RMP changed to: ' + IntToStr(klubRmp));
      end;
    end;
    
    // === УПРАВЛЕНИЕ ALSN ===
    if (vkStatus = 1) and (rbStatus = 1) and 
       IsButtonHeld(13) and (ls = 2) then
    begin
      SafeWriteInteger(KlubConfig.AlsnModeAddress, 1);
      LogMessage('ALSN Mode activated');
    end;
    
    if ((vkStatus = 1) and (rbStatus = 1) or IsButtonHeld(13)) and
       (ls = 3) and (SafeReadInteger(KlubConfig.KlubWhiteSpeedAddress) < 20) and
       (Abs(wheelsetSpeed) < 1.0) then
    begin
      SafeWriteInteger(KlubConfig.AlsnModeAddress, 0);
      LogMessage('ALSN Mode deactivated');
    end;
    
    // === ОБРАБОТКА ЧАСТОТЫ ALSN ===
    if IsButtonPressed(BTN_FREQ_CURR, BTN_FREQ_PREV) then
    begin
      alsnFreq := SafeReadInteger(KlubConfig.AlsnFreqAddress);
      alsnFreq := alsnFreq + 25;
      if alsnFreq > 75 then alsnFreq := 25;
      if alsnFreq < 25 then alsnFreq := 25;
      SafeWriteInteger(KlubConfig.AlsnFreqAddress, Round(alsnFreq));
      LogMessage('ALSN Frequency changed to: ' + IntToStr(Round(alsnFreq)));
    end;
    
    // === РЕЖИМЫ ВВОДА ===
    if IsButtonHeld(BTN_MODE10) then
    begin
      SafeWriteInteger(KlubConfig.KlubVvodModeAddress, 10);
      ClearInputString;
      LogMessage('Entered mode 10 (Train Length)');
    end;
    
    if IsButtonHeld(BTN_MODE20) then
    begin
      SafeWriteInteger(KlubConfig.KlubVvodModeAddress, 20);
      ClearInputString;
      LogMessage('Entered mode 20 (Track Number)');
    end;
    
    if IsButtonHeld(BTN_MODE30) then
    begin
      SafeWriteInteger(KlubConfig.KlubVvodModeAddress, 30);
      ClearInputString;
      LogMessage('Entered mode 30 (Commands)');
    end;
    
    // === ЯРКОСТЬ ===
    if IsButtonPressed(BTN_BRIGHT_CURR, BTN_BRIGHT_PREV) then
    begin
      klubBrightness := SafeReadInteger(KlubConfig.KlubBrightnessAddress);
      Inc(klubBrightness, 64);
      if klubBrightness > 255 then
        klubBrightness := 63;
      SafeWriteInteger(KlubConfig.KlubBrightnessAddress, klubBrightness);
      LogMessage('Brightness changed to: ' + IntToStr(klubBrightness));
    end;
    
    // === ОБРАБОТКА ENTER ===
    if IsButtonPressed(BTN_ENTER_CURR, BTN_ENTER_PREV) then
    begin
      klubVvodMode := SafeReadInteger(KlubConfig.KlubVvodModeAddress);
      inputValue := StrToIntDef(SafeReadAnsiString(KlubConfig.KlubString3Address), 0);
      
      case klubVvodMode of
        13: // Длина поезда
        begin
          SafeWriteInteger(KlubConfig.KlubTrainLengthAddress, inputValue * 24);
          LogMessage('Train length set to: ' + IntToStr(inputValue * 24));
        end;
        
        20: // Номер пути
        begin
          SafeWriteInteger(KlubConfig.KlubTrackAddress, inputValue);
          LogMessage('Track number set to: ' + IntToStr(inputValue));
        end;
        
        21: // Неисправность
        begin
          SafeWriteInteger(KlubConfig.KlubIspravAddress, inputValue);
          LogMessage('Malfunction code set to: ' + IntToStr(inputValue));
        end;
        
        30: // Команды
        begin
          ProcessKlubCommand(inputValue);
        end;
        
        31: // Белая скорость
        begin
          if (SafeReadInteger(KlubConfig.KlubK809Address) = 1) or 
             (SafeReadInteger(KlubConfig.KlubK799Address) = 1) then
          begin
            SafeWriteInteger(KlubConfig.KlubWhiteSpeedAddress, inputValue);
            LogMessage('White speed set to: ' + IntToStr(inputValue));
          end;
        end;
      end;
      
      ClearInputString;
      
      // Переход к следующему режиму
      Inc(klubVvodMode);
      
      // Проверки завершения режимов
      if (klubVvodMode = 15) or (klubVvodMode = 22) or (klubVvodMode = 32) then
        klubVvodMode := 0;
        
      if (klubVvodMode = 31) and 
         (SafeReadInteger(KlubConfig.KlubK809Address) = 0) and
         (SafeReadInteger(KlubConfig.KlubK799Address) = 0) then
        klubVvodMode := 0;
        
      if (klubVvodMode = 21) and 
         (SafeReadInteger(KlubConfig.KlubTrackAddress) = 0) then
      begin
        klubVvodMode := 0;
        SafeWriteInteger(KlubConfig.KlubIspravAddress, -1);
      end;
      
      SafeWriteInteger(KlubConfig.KlubVvodModeAddress, klubVvodMode);
    end;
    
    // === КНОПКА ОТМЕНЫ ===
    if IsButtonHeld(BTN_CANCEL) and (klubVvodMode > 0) then
    begin
      ClearInputString;
      LogMessage('Input cancelled');
    end;
    
    // === ЦИФРОВЫЕ КНОПКИ ===
    if (klubVvodMode > 0) then
    begin
      if IsButtonPressed(BTN_DIGIT0_CURR, BTN_DIGIT0_PREV) then AppendDigitToString(0);
      if IsButtonPressed(BTN_DIGIT1_CURR, BTN_DIGIT1_PREV) then AppendDigitToString(1);
      if IsButtonPressed(BTN_DIGIT2_CURR, BTN_DIGIT2_PREV) then AppendDigitToString(2);
      if IsButtonPressed(BTN_DIGIT3_CURR, BTN_DIGIT3_PREV) then AppendDigitToString(3);
      if IsButtonPressed(BTN_DIGIT4_CURR, BTN_DIGIT4_PREV) then AppendDigitToString(4);
      if IsButtonPressed(BTN_DIGIT5_CURR, BTN_DIGIT5_PREV) then AppendDigitToString(5);
      if IsButtonPressed(BTN_DIGIT6_CURR, BTN_DIGIT6_PREV) then AppendDigitToString(6);
      if IsButtonPressed(BTN_DIGIT7_CURR, BTN_DIGIT7_PREV) then AppendDigitToString(7);
      if IsButtonPressed(BTN_DIGIT8_CURR, BTN_DIGIT8_PREV) then AppendDigitToString(8);
      if IsButtonPressed(BTN_DIGIT9_CURR, BTN_DIGIT9_PREV) then AppendDigitToString(9);
    end;
    
    // === ДОПОЛНИТЕЛЬНЫЕ ФУНКЦИИ SAUT ===
    
    // Кнопка SAUT PODT
    if IsButtonPressed(BTN_SAUT_PODT_CURR, BTN_SAUT_PODT_PREV) then
    begin
      traversedPath := SafeReadSingle(KlubConfig.TraversedPathAddress);
      sautPodtDist := Round(traversedPath) + SafeReadInteger(KlubConfig.SautAimDistAddress) + 300;
      SafeWriteInteger(KlubConfig.SautPodtDistAddress, sautPodtDist);
      LogMessage('SAUT PODT distance set to: ' + IntToStr(sautPodtDist));
    end;
    
    // Кнопка SAUT OTPRAV
    if IsButtonPressed(BTN_SAUT_OTPR_CURR, BTN_SAUT_OTPR_PREV) and (ls = 1) then
    begin
      traversedPath := SafeReadSingle(KlubConfig.TraversedPathAddress);
      sautOtpravDist := Round(traversedPath) + SafeReadInteger(KlubConfig.SautAimDistAddress) + 600;
      SafeWriteInteger(KlubConfig.SautOtpravDistAddress, sautOtpravDist);
      SafeWriteInteger(KlubConfig.KlubWhiteSpeedAddress, 52);
      LogMessage('SAUT OTPRAV activated, distance: ' + IntToStr(sautOtpravDist));
    end;
    
    // === УСТАНОВКА ФЛАГОВ ===
    
    // Флаг ЭК
    SafeWriteInteger(KlubConfig.KlubEkAddress, 
      Integer(SafeReadInteger(KlubConfig.KlubTrackAddress) > 0));
    
    // Сброс K4 при движении
    if absSpeedKph > 2.0 then
      SafeWriteInteger(KlubConfig.KlubK4Address, 0);
    
  except
    on E: Exception do
      LogMessage('Error in WORLD_PROCESSKLUBKEYS: ' + E.Message);
  end;
end;

// === ИНИЦИАЛИЗАЦИЯ И КОНФИГУРАЦИЯ ===

procedure InitializeKlubProcessor(const Config: TKlubConfig);
begin
  KlubConfig := Config;
  LogMessage('KlubProcessor initialized with base address: $' + IntToHex(Config.BaseAddress, 8));
end;

function GetDefaultKlubConfig: TKlubConfig;
begin
  // Заполняем конфигурацию по умолчанию
  // ЭТИ АДРЕСА НУЖНО ЗАМЕНИТЬ НА РЕАЛЬНЫЕ!
  with Result do
  begin
    BaseAddress := $00400000;
    
    ZButtonsBase := $8C9A000;
    
    KlubRmpAddress := $8C9B000;
    KlubVvodModeAddress := $8C9B004;
    KlubBrightnessAddress := $8C9B008;
    KlubString2Address := $8C9B00C;
    KlubString3Address := $8C9B010;
    KlubMessageAddress := $8C9B014;
    KlubTrainLengthAddress := $8C9B018;
    KlubTrackAddress := $8C9B01C;
    KlubIspravAddress := $8C9B020;
    KlubK4Address := $8C9B024;
    KlubK71Address := $8C9B028;
    KlubShowTCAddress := $8C9B02C;
    KlubK122Address := $8C9B030;
    KlubK799Address := $8C9B034;
    KlubK809Address := $8C9B038;
    KlubWhiteSpeedAddress := $8C9B03C;
    KlubEkAddress := $8C9B040;
    
    WheelsetsSpeedAddress := $8C9C000;
    LsAddress := $8C9C004;
    AlsnModeAddress := $8C9C008;
    AlsnFreqAddress := $8C9C00C;
    VkStatusAddress := $8C9C010;
    RbStatusAddress := $8C9C014;
    ZTimeAddress := $8C9C018;
    AbsSpeedKphAddress := $8C9C01C;
    TraversedPathAddress := $8C9C020;
    SautPodtDistAddress := $8C9C024;
    SautOtpravDistAddress := $8C9C028;
    SautAimDistAddress := $8C9C02C;
    SautSpeedLimitAddress := $8C9C030;
    MyTrackAddress := $8C9C034;
    MaxTracksAddress := $8C9C038;
    RouteAddress := $8C9C03C;
  end;
end;

procedure LogMessage(const Msg: string);
var
  F: TextFile;
  TimeStr: string;
begin
  if not EnableLogging then Exit;
  
  try
    AssignFile(F, LogFileName);
    if FileExists(LogFileName) then
      Append(F)
    else
      Rewrite(F);
      
    TimeStr := FormatDateTime('yyyy-mm-dd hh:nn:ss', Now);
    WriteLn(F, '[' + TimeStr + '] ' + Msg);
    CloseFile(F);
  except
    // Игнорируем ошибки логирования
  end;
end;

// === ИНИЦИАЛИЗАЦИЯ МОДУЛЯ ===

initialization
  // Устанавливаем конфигурацию по умолчанию
  KlubConfig := GetDefaultKlubConfig;

finalization
  // Очистка ресурсов при завершении

end.
