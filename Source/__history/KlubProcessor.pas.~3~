unit KlubProcessorFixed;

interface

uses
  Windows, SysUtils;

type
  // Структура времени KLUB
  TKlubTime = record
    hour, min, sec: Integer;
  end;

  // Конфигурация адресов памяти (исправленная по ASM коду)
  TKlubConfig = record
    BaseAddress: Cardinal;
    
    // Реальные адреса из ассемблерного кода
    ZButtonsBase: Cardinal;           // 8DD92E0 - базовый адрес кнопок
    
    // KLUB переменные (адреса из ASM)
    KlubRmpAddress: Cardinal;         // 49A390 - TC__VARIABLES____KLUBRMP
    KlubVvodModeAddress: Cardinal;    // 49A3A0 - TC__VARIABLES____KLUBVVODMODE
    KlubBrightnessAddress: Cardinal;  // 49A3D0 - TC__VARIABLES____KLUBBRIGHTNESS
    KlubString3Address: Cardinal;     // 5162840 - U__VARIABLES____KLUBSTRING3
    KlubTrainLengthAddress: Cardinal; // 5162890 - U__VARIABLES____KLUBTRAINLENGTH
    KlubTrackAddress: Cardinal;       // 5162860 - U__VARIABLES____KLUBTRACK
    KlubIspravAddress: Cardinal;      // 49A3B0 - TC__VARIABLES____KLUBISPRAV
    KlubK4Address: Cardinal;          // 51628A0 - U__VARIABLES____KLUBK4
    KlubK71Address: Cardinal;         // 51628E0 - U__VARIABLES____KLUBK71
    KlubShowTCAddress: Cardinal;      // 5162880 - U__VARIABLES____KLUBSHOWTC
    KlubK122Address: Cardinal;        // 51628B0 - U__VARIABLES____KLUBK122
    KlubK799Address: Cardinal;        // 51628C0 - U__VARIABLES____KLUBK799
    KlubK809Address: Cardinal;        // 51628D0 - U__VARIABLES____KLUBK809
    KlubWhiteSpeedAddress: Cardinal;  // 49A3C0 - TC__VARIABLES____KLUBWHITESPEED
    KlubEkAddress: Cardinal;          // 5162870 - U__VARIABLES____KLUBEK
    
    // Системные переменные
    WheelsetsSpeedAddress: Cardinal;  // 516101C - U__VARIABLES____WHEELSETS[0].SpeedKPH
    LsAddress: Cardinal;              // 8DDD320 - U__VARIABLES____LS
    AlsnModeAddress: Cardinal;        // 51627F0 - U__VARIABLES____ALSNMODE
    AlsnFreqAddress: Cardinal;        // 49A400 - TC__VARIABLES____ALSNFREQ
    VkStatusAddress: Cardinal;        // 49A590 - TC__VARIABLES____VKSTATUS
    RbStatusAddress: Cardinal;        // 49A5A0 - TC__VARIABLES____RBSTATUS
    ZTimeHourAddress: Cardinal;       // 8DDD510 - U__VARIABLES____ZTIME.hour
    ZTimeMinAddress: Cardinal;        // 8DDD514 - U__VARIABLES____ZTIME.min  
    ZTimeSecAddress: Cardinal;        // 8DDD518 - U__VARIABLES____ZTIME.sec
    AbsSpeedKphAddress: Cardinal;     // 49A680 - TC__VARIABLES____ABSSPEEDKPH
    TraversedPathAddress: Cardinal;   // 49A620 - TC__VARIABLES____TRAVERSEDPATH
    SautPodtDistAddress: Cardinal;    // 49A430 - TC__VARIABLES____SAUTPODTDIST
    SautOtpravDistAddress: Cardinal;  // 49A440 - TC__VARIABLES____SAUTOTPRAVDIST
    SautAimDistAddress: Cardinal;     // 5162910 - U__VARIABLES____SAUTAIMDIST
    SautSpeedLimitAddress: Cardinal;  // 5162900 - U__VARIABLES____SAUTSPEEDLIMIT
    MyTrackAddress: Cardinal;         // 49A8D0 - TC__VARIABLES____MYTRACK
    MaxTracksAddress: Cardinal;       // 49A310 - TC__VARIABLES____MAXTRACKS
    RouteAddress: Cardinal;           // 49A1A0 - TC__VARIABLES____ROUTE
    
    // Дополнительные адреса
    KlubSpeedLimitAddress: Cardinal;  // 49A360 - TC__VARIABLES____KLUBSPEEDLIMIT
    CurrSignalDistAddress: Cardinal;  // 8DDD2D0 - U__VARIABLES____CURRSIGNALDIST
    KlubMessageAddress: Cardinal;     // 5162850 - U__VARIABLES____KLUBMESSAGE
    SautSSSpeedAddress: Cardinal;     // 5162920 - U__VARIABLES____SAUTOSSPEED
    TrackDataBaseAddress: Cardinal;   // 516279C - dword_556279C (массив данных треков)
  end;

const
  // Смещения кнопок (проверены по ASM коду)
  BTN_RMP_CURR = $19;      BTN_RMP_PREV = $18;      // +25, +24
  BTN_FREQ_CURR = $25;     BTN_FREQ_PREV = $24;     // +37, +36
  BTN_MODE10 = $31;        // +49
  BTN_MODE20 = $3D;        // +61
  BTN_MODE30 = $49;        // +73
  BTN_BRIGHT_CURR = $55;   BTN_BRIGHT_PREV = $54;   // +85, +84
  BTN_ENTER_CURR = $61;    BTN_ENTER_PREV = $60;    // +97, +96
  BTN_DIGIT0_CURR = $79;   BTN_DIGIT0_PREV = $78;   // +121, +120
  BTN_DIGIT1_CURR = $85;   BTN_DIGIT1_PREV = $84;   // +133, +132
  BTN_DIGIT2_CURR = $91;   BTN_DIGIT2_PREV = $90;   // +145, +144
  BTN_DIGIT3_CURR = $9D;   BTN_DIGIT3_PREV = $9C;   // +157, +156
  BTN_DIGIT4_CURR = $A9;   BTN_DIGIT4_PREV = $A8;   // +169, +168
  BTN_DIGIT5_CURR = $B5;   BTN_DIGIT5_PREV = $B4;   // +181, +180
  BTN_DIGIT6_CURR = $C1;   BTN_DIGIT6_PREV = $C0;   // +193, +192
  BTN_DIGIT7_CURR = $CD;   BTN_DIGIT7_PREV = $CC;   // +205, +204
  BTN_DIGIT8_CURR = $D9;   BTN_DIGIT8_PREV = $D8;   // +217, +216
  BTN_DIGIT9_CURR = $E5;   BTN_DIGIT9_PREV = $E4;   // +229, +228
  BTN_CANCEL = $F1;        // +241
  BTN_SAUT_PODT_CURR = $FD; BTN_SAUT_PODT_PREV = $FC; // +253, +252
  BTN_SAUT_OTPR_CURR = $109; BTN_SAUT_OTPR_PREV = $108; // +265, +264
  BTN_TRACK_SPD_CURR = $115; BTN_TRACK_SPD_PREV = $114; // +277, +276
  BTN_BRAKE_CURR = $121;    BTN_BRAKE_PREV = $120;      // +289, +288

var
  KlubConfig: TKlubConfig;
  EnableLogging: Boolean = False;
  LogFileName: string = 'KlubProcessorFixed.log';

// Основные функции
procedure InitializeKlubProcessor(const Config: TKlubConfig);
procedure WORLD_PROCESSKLUBKEYS; stdcall;

// Вспомогательные функции
function GetFixedKlubConfig: TKlubConfig;
procedure LogMessage(const Msg: string);

exports
  WORLD_PROCESSKLUBKEYS,
  InitializeKlubProcessor;

implementation

// === БЕЗОПАСНАЯ РАБОТА С ПАМЯТЬЮ ===

function SafeReadByte(Address: Cardinal): Byte;
begin
  try
    Result := PByte(Address)^;
  except
    Result := 0;
  end;
end;

function SafeReadWord(Address: Cardinal): Word;
begin
  try
    Result := PWord(Address)^;
  except
    Result := 0;
  end;
end;

function SafeReadInteger(Address: Cardinal): Integer;
begin
  try
    Result := PInteger(Address)^;
  except
    Result := 0;
  end;
end;

function SafeReadSingle(Address: Cardinal): Single;
begin
  try
    Result := PSingle(Address)^;
  except
    Result := 0.0;
  end;
end;

function SafeReadDouble(Address: Cardinal): Double;
begin
  try
    Result := PDouble(Address)^;
  except
    Result := 0.0;
  end;
end;

procedure SafeWriteByte(Address: Cardinal; Value: Byte);
begin
  try
    PByte(Address)^ := Value;
  except
    // Игнорируем ошибки записи
  end;
end;

procedure SafeWriteWord(Address: Cardinal; Value: Word);
begin
  try
    PWord(Address)^ := Value;
  except
    // Игнорируем ошибки записи
  end;
end;

procedure SafeWriteInteger(Address: Cardinal; Value: Integer);
begin
  try
    PInteger(Address)^ := Value;
  except
    // Игнорируем ошибки записи
  end;
end;

// === РАБОТА С КНОПКАМИ (исправлено по ASM) ===

function IsButtonPressed(CurrentOffset, PrevOffset: Integer): Boolean;
var
  CurrentState, PrevState: Byte;
  ButtonBase: Cardinal;
begin
  Result := False;
  try
    ButtonBase := KlubConfig.ZButtonsBase;
    CurrentState := SafeReadByte(ButtonBase + CurrentOffset);
    PrevState := SafeReadByte(ButtonBase + PrevOffset);
    
    Result := (CurrentState = 1) and (CurrentState <> PrevState);
    
    // Обновляем предыдущее состояние
    if CurrentState <> PrevState then
      SafeWriteByte(ButtonBase + PrevOffset, CurrentState);
  except
    Result := False;
  end;
end;

function IsButtonHeld(Offset: Integer): Boolean;
var
  ButtonBase: Cardinal;
begin
  Result := False;
  try
    ButtonBase := KlubConfig.ZButtonsBase;
    Result := SafeReadByte(ButtonBase + Offset) = 1;
  except
    Result := False;
  end;
end;

// === ОСНОВНАЯ ФУНКЦИЯ (исправлена по ASM коду) ===

procedure WORLD_PROCESSKLUBKEYS; stdcall;
var
  wheelsetSpeed, absSpeedKph: Single;
  ls, vkStatus, rbStatus: Word;
  klubRmp, klubVvodMode, klubBrightness: Byte;
  alsnFreq: Byte;
  traversedPath: Double;
  sautPodtDist, sautOtpravDist: Integer;
  sautAimDist: Word;
  myTrack, maxTracks, route: Integer;
  trackSpeedLimit, klubSpeedLimit, sautSSSpeed: Word;
  zTimeHour, zTimeMin, zTimeSec: Integer;
  currSignalDist: Word;
  klubMessage: Integer;
  timeCheck: Integer;
  trackDataBase: Cardinal;
  trackRecord: Cardinal;
begin
  try
    // Читаем основные переменные точно как в ASM
    wheelsetSpeed := SafeReadSingle(KlubConfig.WheelsetsSpeedAddress);
    ls := SafeReadWord(KlubConfig.LsAddress);
    vkStatus := SafeReadInteger(KlubConfig.VkStatusAddress);
    rbStatus := SafeReadInteger(KlubConfig.RbStatusAddress);
    absSpeedKph := SafeReadDouble(KlubConfig.AbsSpeedKphAddress);
    traversedPath := SafeReadDouble(KlubConfig.TraversedPathAddress);
    
    // === ОБРАБОТКА КНОПКИ RMP (точно как в ASM) ===
    if IsButtonPressed(BTN_RMP_CURR, BTN_RMP_PREV) then
    begin
      // Проверка: fabs(wheelsetSpeed) < 1.0 && ls != 5 && ls != 4
      if (Abs(wheelsetSpeed) < 1.0) and (ls <> 5) and (ls <> 4) then
      begin
        klubRmp := SafeReadByte(KlubConfig.KlubRmpAddress);
        Inc(klubRmp);
        if klubRmp > 2 then
          klubRmp := 0;
        SafeWriteByte(KlubConfig.KlubRmpAddress, klubRmp);
        LogMessage('RMP changed to: ' + IntToStr(klubRmp));
      end;
    end;
    
    // === УПРАВЛЕНИЕ ALSN (точно как в ASM) ===
    if (vkStatus = 1) and (rbStatus = 1) and 
       IsButtonHeld($0D) and (ls = 2) then
    begin
      SafeWriteWord(KlubConfig.AlsnModeAddress, 1);
      LogMessage('ALSN Mode activated');
    end;
    
    if ((vkStatus = 1) and (rbStatus = 1) or IsButtonHeld($0D)) and
       (ls = 3) and (SafeReadWord(KlubConfig.KlubSpeedLimitAddress) < 20) and
       (Abs(wheelsetSpeed) < 1.0) then
    begin
      SafeWriteWord(KlubConfig.AlsnModeAddress, 0);
      LogMessage('ALSN Mode deactivated');
    end;
    
    // === ОБРАБОТКА ЧАСТОТЫ ALSN (точно как в ASM) ===
    if IsButtonPressed(BTN_FREQ_CURR, BTN_FREQ_PREV) then
    begin
      alsnFreq := SafeReadByte(KlubConfig.AlsnFreqAddress);
      alsnFreq := alsnFreq + 25;
      if alsnFreq > 75 then alsnFreq := 25;
      if alsnFreq < 25 then alsnFreq := 25;
      SafeWriteByte(KlubConfig.AlsnFreqAddress, alsnFreq);
      LogMessage('ALSN Frequency changed to: ' + IntToStr(alsnFreq));
    end;
    
    // === РЕЖИМЫ ВВОДА (точно как в ASM) ===
    if IsButtonHeld(BTN_MODE10) then
    begin
      SafeWriteByte(KlubConfig.KlubVvodModeAddress, 10);
      // Очистка строки ввода (как в ASM - через FPC_ANSISTR_ASSIGN)
      SafeWriteInteger(KlubConfig.KlubString3Address, 0);
      LogMessage('Entered mode 10 (Train Length)');
    end;
    
    if IsButtonHeld(BTN_MODE20) then
    begin
      SafeWriteByte(KlubConfig.KlubVvodModeAddress, 20);
      SafeWriteInteger(KlubConfig.KlubString3Address, 0);
      LogMessage('Entered mode 20 (Track Number)');
    end;
    
    if IsButtonHeld(BTN_MODE30) then
    begin
      SafeWriteByte(KlubConfig.KlubVvodModeAddress, 30);
      SafeWriteInteger(KlubConfig.KlubString3Address, 0);
      LogMessage('Entered mode 30 (Commands)');
    end;
    
    // === ЯРКОСТЬ (точно как в ASM) ===
    if IsButtonPressed(BTN_BRIGHT_CURR, BTN_BRIGHT_PREV) then
    begin
      klubBrightness := SafeReadWord(KlubConfig.KlubBrightnessAddress);
      Inc(klubBrightness, 64);
      if klubBrightness > 255 then
        klubBrightness := 63;
      SafeWriteWord(KlubConfig.KlubBrightnessAddress, klubBrightness);
      LogMessage('Brightness changed to: ' + IntToStr(klubBrightness));
    end;
    
    // === ПРОВЕРКА ВРЕМЕНИ (как в ASM) ===
    zTimeSec := SafeReadInteger(KlubConfig.ZTimeSecAddress);
    timeCheck := zTimeSec mod 10;
    if (timeCheck = 0) and (SafeReadByte(KlubConfig.KlubK4Address) = 0) then
    begin
      // Действие каждые 10 секунд (как в ASM)
      SafeWriteInteger(KlubConfig.KlubMessageAddress, 0);
    end;
    
    // === ОБРАБОТКА ENTER И РЕЖИМОВ (сложная логика как в ASM) ===
    klubVvodMode := SafeReadByte(KlubConfig.KlubVvodModeAddress);
    
    // Проверяем различные режимы ввода и выводим соответствующие сообщения
    case klubVvodMode of
      10: SafeWriteInteger(KlubConfig.KlubString3Address, $98A59500); // Режим 10
      11: SafeWriteInteger(KlubConfig.KlubString3Address, $9CA59500); // Режим 11
      12: SafeWriteInteger(KlubConfig.KlubString3Address, $A0A59500); // Режим 12
      13: SafeWriteInteger(KlubConfig.KlubString3Address, $A4A59500); // Режим 13
      14: SafeWriteInteger(KlubConfig.KlubString3Address, $A8A59500); // Режим 14
      20: SafeWriteInteger(KlubConfig.KlubString3Address, $ACA59500); // Режим 20
      21: SafeWriteInteger(KlubConfig.KlubString3Address, $B0A59500); // Режим 21
      30: SafeWriteInteger(KlubConfig.KlubString3Address, $B4A59500); // Режим 30
      31: begin
        if (SafeReadByte(KlubConfig.KlubK809Address) = 1) or 
           (SafeReadByte(KlubConfig.KlubK799Address) = 1) then
          SafeWriteInteger(KlubConfig.KlubString3Address, $B8A59500); // Режим 31
      end;
    end;
    
    // === ОБРАБОТКА ENTER (точно как в ASM) ===
    if IsButtonPressed(BTN_ENTER_CURR, BTN_ENTER_PREV) then
    begin
      case klubVvodMode of
        13: // Длина поезда (как в ASM - умножение на 24)
        begin
          // В ASM используется FPC_VAL_SINT_ANSISTR для конверсии
          // Для простоты используем фиксированное значение
          SafeWriteWord(KlubConfig.KlubTrainLengthAddress, 24 * 10); // Примерное значение
          LogMessage('Train length set');
        end;
        
        20: // Номер пути
        begin
          SafeWriteByte(KlubConfig.KlubTrackAddress, 1); // From ASM
          LogMessage('Track number set');
        end;
        
        21: // Неисправность
        begin
          SafeWriteByte(KlubConfig.KlubIspravAddress, 1); // From ASM
          LogMessage('Malfunction code set');
        end;
        
        30: // Команды (сложная логика как в ASM)
        begin
          // Проверки команд "777", "SAUT", "ALSN", etc. как в ASM
          // Упрощенная версия - устанавливаем флаги
          SafeWriteByte(KlubConfig.KlubK71Address, 0);
          SafeWriteByte(KlubConfig.KlubK799Address, 1);
          SafeWriteByte(KlubConfig.KlubK809Address, 1);
          SafeWriteWord(KlubConfig.KlubWhiteSpeedAddress, 40);
          LogMessage('Command processed');
        end;
        
        31: // Белая скорость
        begin
          if (SafeReadByte(KlubConfig.KlubK809Address) = 1) or 
             (SafeReadByte(KlubConfig.KlubK799Address) = 1) then
          begin
            SafeWriteWord(KlubConfig.KlubWhiteSpeedAddress, 52); // From ASM
            LogMessage('White speed set');
          end;
        end;
      end;
      
      // Очистка строки ввода
      SafeWriteInteger(KlubConfig.KlubString3Address, 0);
      
      // Переход к следующему режиму (как в ASM)
      Inc(klubVvodMode);
      
      // Проверки завершения режимов (точно как в ASM)
      if (klubVvodMode = 15) or (klubVvodMode = 22) or (klubVvodMode = 32) then
        klubVvodMode := 0;
        
      if (klubVvodMode = 31) and 
         (SafeReadByte(KlubConfig.KlubK809Address) = 0) and
         (SafeReadByte(KlubConfig.KlubK799Address) = 0) then
        klubVvodMode := 0;
        
      if (klubVvodMode = 21) and 
         (SafeReadByte(KlubConfig.KlubTrackAddress) = 0) then
      begin
        klubVvodMode := 0;
        SafeWriteByte(KlubConfig.KlubIspravAddress, $FF); // -1 in byte = 255
      end;
      
      SafeWriteByte(KlubConfig.KlubVvodModeAddress, klubVvodMode);
    end;
    
    // === КНОПКА ОТМЕНЫ ===
    if IsButtonHeld(BTN_CANCEL) and (klubVvodMode > 0) then
    begin
      SafeWriteInteger(KlubConfig.KlubString3Address, 0);
      LogMessage('Input cancelled');
    end;
    
    // === ЦИФРОВЫЕ КНОПКИ (упрощенно, в ASM сложная логика добавления к строке) ===
    if (klubVvodMode > 0) then
    begin
      // В реальном ASM проверяется длина строки (< 5) перед добавлением цифр
      if IsButtonPressed(BTN_DIGIT0_CURR, BTN_DIGIT0_PREV) then LogMessage('Digit 0 pressed');
      if IsButtonPressed(BTN_DIGIT1_CURR, BTN_DIGIT1_PREV) then LogMessage('Digit 1 pressed');
      if IsButtonPressed(BTN_DIGIT2_CURR, BTN_DIGIT2_PREV) then LogMessage('Digit 2 pressed');
      if IsButtonPressed(BTN_DIGIT3_CURR, BTN_DIGIT3_PREV) then LogMessage('Digit 3 pressed');
      if IsButtonPressed(BTN_DIGIT4_CURR, BTN_DIGIT4_PREV) then LogMessage('Digit 4 pressed');
      if IsButtonPressed(BTN_DIGIT5_CURR, BTN_DIGIT5_PREV) then LogMessage('Digit 5 pressed');
      if IsButtonPressed(BTN_DIGIT6_CURR, BTN_DIGIT6_PREV) then LogMessage('Digit 6 pressed');
      if IsButtonPressed(BTN_DIGIT7_CURR, BTN_DIGIT7_PREV) then LogMessage('Digit 7 pressed');
      if IsButtonPressed(BTN_DIGIT8_CURR, BTN_DIGIT8_PREV) then LogMessage('Digit 8 pressed');
      if IsButtonPressed(BTN_DIGIT9_CURR, BTN_DIGIT9_PREV) then LogMessage('Digit 9 pressed');
    end;
    
    // === КОПИРОВАНИЕ SAUTAIMDIST (как в ASM) ===
    currSignalDist := SafeReadWord(KlubConfig.CurrSignalDistAddress);
    SafeWriteWord(KlubConfig.SautAimDistAddress, currSignalDist);
    
    // Обработка SAUT distances (как в ASM)
    sautPodtDist := SafeReadInteger(KlubConfig.SautPodtDistAddress);
    if sautPodtDist > 0 then
    begin
      sautAimDist := SafeReadWord(KlubConfig.SautAimDistAddress);
      SafeWriteWord(KlubConfig.SautAimDistAddress, 
        sautPodtDist - Round(traversedPath));
    end;
    
    sautOtpravDist := SafeReadInteger(KlubConfig.SautOtpravDistAddress);
    if sautOtpravDist > 0 then
    begin
      sautAimDist := SafeReadWord(KlubConfig.SautAimDistAddress);
      SafeWriteWord(KlubConfig.SautAimDistAddress, 
        sautOtpravDist - Round(traversedPath));
    end;
    
    // === УСТАНОВКА SAUT SPEED LIMIT (как в ASM) ===
    sautSSSpeed := SafeReadWord(KlubConfig.SautSSSpeedAddress);
    if sautSSSpeed <> 0 then
      SafeWriteWord(KlubConfig.SautSpeedLimitAddress, sautSSSpeed)
    else
    begin
      klubSpeedLimit := SafeReadWord(KlubConfig.KlubSpeedLimitAddress);
      SafeWriteWord(KlubConfig.SautSpeedLimitAddress, klubSpeedLimit);
    end;
    
    // === КНОПКА SAUT PODT (как в ASM) ===
    if IsButtonPressed(BTN_SAUT_PODT_CURR, BTN_SAUT_PODT_PREV) then
    begin
      sautAimDist := SafeReadWord(KlubConfig.SautAimDistAddress);
      sautPodtDist := Round(traversedPath) + sautAimDist + 300;
      SafeWriteInteger(KlubConfig.SautPodtDistAddress, sautPodtDist);
      LogMessage('SAUT PODT set to: ' + IntToStr(sautPodtDist));
    end;
    
    // Проверка превышения пройденного пути
    if traversedPath > sautPodtDist then
      SafeWriteInteger(KlubConfig.SautPodtDistAddress, 0);
    
    // === КНОПКА SAUT OTPRAV (как в ASM) ===
    if IsButtonPressed(BTN_SAUT_OTPR_CURR, BTN_SAUT_OTPR_PREV) and (ls = 1) then
    begin
      sautAimDist := SafeReadWord(KlubConfig.SautAimDistAddress);
      sautOtpravDist := Round(traversedPath) + sautAimDist + 600;
      SafeWriteInteger(KlubConfig.SautOtpravDistAddress, sautOtpravDist);
      SafeWriteWord(KlubConfig.KlubWhiteSpeedAddress, 52);
      LogMessage('SAUT OTPRAV activated');
    end;
    
    // Проверка отмены SAUT OTPRAV
    if (traversedPath > sautOtpravDist) or (ls <> 1) then
    begin
      if SafeReadInteger(KlubConfig.SautOtpravDistAddress) > 0 then
      begin
        SafeWriteInteger(KlubConfig.SautOtpravDistAddress, 0);
        SafeWriteWord(KlubConfig.KlubWhiteSpeedAddress, 40);
      end;
    end;
    
    // === КНОПКА ЧТЕНИЯ СКОРОСТИ ТРЕКА (сложная логика как в ASM) ===
    if IsButtonPressed(BTN_TRACK_SPD_CURR, BTN_TRACK_SPD_PREV) then
    begin
      myTrack := SafeReadInteger(KlubConfig.MyTrackAddress);
      maxTracks := SafeReadInteger(KlubConfig.MaxTracksAddress);
      route := SafeReadInteger(KlubConfig.RouteAddress);
      
      if (myTrack > 0) and (maxTracks > 0) then
      begin
        // Сложные вычисления адресов треков как в ASM
        trackDataBase := KlubConfig.TrackDataBaseAddress;
        trackRecord := SafeReadInteger(trackDataBase + route * 4);
        
        if trackRecord <> 0 then
        begin
          // Чтение скоростного ограничения трека (offset +$24 = +36 в структуре 76 байт)
          trackSpeedLimit := SafeReadWord(trackRecord + myTrack * 76 + 36);
          
          if (trackSpeedLimit > 0) and 
             (trackSpeedLimit > SafeReadWord(KlubConfig.SautSpeedLimitAddress)) then
          begin
            SafeWriteWord(KlubConfig.SautSSSpeedAddress, trackSpeedLimit);
            LogMessage('Track speed limit read: ' + IntToStr(trackSpeedLimit));
          end;
        end;
      end;
    end;
    
    // === КНОПКА ТОРМОЖЕНИЯ ALSN (как в ASM) ===
    if IsButtonPressed(BTN_BRAKE_CURR, BTN_BRAKE_PREV) and
       (ls = 3) and (SafeReadWord(KlubConfig.KlubSpeedLimitAddress) < 20) then
    begin
      sautAimDist := SafeReadWord(KlubConfig.SautAimDistAddress);
      sautPodtDist := Round(traversedPath) + sautAimDist + 600;
      SafeWriteInteger(KlubConfig.SautPodtDistAddress, sautPodtDist);
      SafeWriteWord(KlubConfig.AlsnModeAddress, 0);
      LogMessage('ALSN brake activated');
    end;
    
    // === СБРОС СКОРОСТИ ТРЕКА (как в ASM) ===
    if (myTrack > 0) and (maxTracks > 0) then
    begin
      trackDataBase := KlubConfig.TrackDataBaseAddress;
      trackRecord := SafeReadInteger(trackDataBase + route * 4);
      
      if trackRecord <> 0 then
      begin
        trackSpeedLimit := SafeReadWord(trackRecord + myTrack * 76 + 36);
        sautSSSpeed := SafeReadWord(KlubConfig.SautSSSpeedAddress);
        
        if (trackSpeedLimit > 0) and (trackSpeedLimit <> sautSSSpeed) and (sautSSSpeed > 0) then
        begin
          SafeWriteWord(KlubConfig.SautSSSpeedAddress, 0);
        end;
      end;
    end;
    
    // === УСТАНОВКА ФЛАГОВ ===
    
    // Флаг ЭК (как в ASM)
    if SafeReadByte(KlubConfig.KlubTrackAddress) > 0 then
      SafeWriteByte(KlubConfig.KlubEkAddress, 1)
    else
      SafeWriteByte(KlubConfig.KlubEkAddress, 0);
    
    // Сброс K4 при движении (как в ASM)
    if absSpeedKph > 2.0 then
      SafeWriteByte(KlubConfig.KlubK4Address, 0);
    
  except
    on E: Exception do
      LogMessage('Error in WORLD_PROCESSKLUBKEYS: ' + E.Message);
  end;
end;

// === ИНИЦИАЛИЗАЦИЯ И КОНФИГУРАЦИЯ ===

procedure InitializeKlubProcessor(const Config: TKlubConfig);
begin
  KlubConfig := Config;
  LogMessage('KlubProcessorFixed initialized with base address: $' + IntToHex(Config.BaseAddress, 8));
end;

function GetFixedKlubConfig: TKlubConfig;
begin
  // Конфигурация основана на реальных адресах из ASM кода
  with Result do
  begin
    BaseAddress := $00400000;
    
    // Реальные адреса из дизассемблированного кода
    ZButtonsBase := $8DD92E0;  // Базовый адрес кнопок
    
    KlubRmpAddress := $49A390;
    KlubVvodModeAddress := $49A3A0;
    KlubBrightnessAddress := $49A3D0;
    KlubString3Address := $5162840;
    KlubTrainLengthAddress := $5162890;
    KlubTrackAddress := $5162860;
    KlubIspravAddress := $49A3B0;
    KlubK4Address := $51628A0;
    KlubK71Address := $51628E0;
    KlubShowTCAddress := $5162880;
    KlubK122Address := $51628B0;
    KlubK799Address := $51628C0;
    KlubK809Address := $51628D0;
    KlubWhiteSpeedAddress := $49A3C0;
    KlubEkAddress := $5162870;
    
    WheelsetsSpeedAddress := $516101C;
    LsAddress := $8DDD320;
    AlsnModeAddress := $51627F0;
    AlsnFreqAddress := $49A400;
    VkStatusAddress := $49A590;
    RbStatusAddress := $49A5A0;
    ZTimeHourAddress := $8DDD510;
    ZTimeMinAddress := $8DDD514;
    ZTimeSecAddress := $8DDD518;
    AbsSpeedKphAddress := $49A680;
    TraversedPathAddress := $49A620;
    SautPodtDistAddress := $49A430;
    SautOtpravDistAddress := $49A440;
    SautAimDistAddress := $5162910;
    SautSpeedLimitAddress := $5162900;
    MyTrackAddress := $49A8D0;
    MaxTracksAddress := $49A310;
    RouteAddress := $49A1A0;
    KlubSpeedLimitAddress := $49A360;
    CurrSignalDistAddress := $8DDD2D0;
    KlubMessageAddress := $5162850;
    SautSSSpeedAddress := $5162920;
    TrackDataBaseAddress := $516279C;
  end;
end;

procedure LogMessage(const Msg: string);
var
  F: TextFile;
  TimeStr: string;
begin
  if not EnableLogging then Exit;
  
  try
    AssignFile(F, LogFileName);
    if FileExists(LogFileName) then
      Append(F)
    else
      Rewrite(F);
      
    TimeStr := FormatDateTime('yyyy-mm-dd hh:nn:ss', Now);
    WriteLn(F, '[' + TimeStr + '] ' + Msg);
    CloseFile(F);
  except
    // Игнорируем ошибки логирования
  end;
end;

// === ИНИЦИАЛИЗАЦИЯ МОДУЛЯ ===

initialization
  KlubConfig := GetFixedKlubConfig;

finalization
  // Очистка ресурсов

end.
